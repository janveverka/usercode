/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 * Jan Veverka, MIT, 25 Jul 2013                                             *
 * Numerical inverse of a function                                           *
 *****************************************************************************/ 

#include "Riostream.h" 

#include "FWLite/Tools/interface/RooNumInverse.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h"
#include "RooPlot.h"
#include "RooCurve.h"
#include "TGraph.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooNumInverse) 

RooNumInverse::RooNumInverse(const char *name, const char *title, 
			     RooAbsRealLValue& xx,
			     const RooAbsReal& ff,
			     Double_t precision) :
  RooAbsReal(name,title), 
  x_("x","x",this,xx),
  spline_(),
  precision_(precision)
{
  init(xx, ff);
} 


RooNumInverse::RooNumInverse(const RooNumInverse& other, const char* name) :  
  RooAbsReal(other,name), 
  x_("x",this,other.x_),
  spline_(other.spline_),
  precision_(other.precision_)
{ 
} 


void
RooNumInverse::init(RooAbsRealLValue& xx, const RooAbsReal& ff)
{ 
  RooPlot *plot = xx.frame();
  ff.plotOn(plot, RooFit::Precision(precision_));
  RooCurve *curve = plot->getCurve();
  // RooFit black magic: skip the first 2 and the last 3 points
  TGraph graph(curve->GetN() - 5, curve->GetY() + 2, curve->GetX() + 2);
  consolidateGraph(graph);
  // ff.Print();
  // graph.Print();
  spline_ = TSpline3("spline", &graph, "e2b2");
  delete plot;
} 


// Make sure graph.GetX() is a monotonous sequence
void
RooNumInverse::consolidateGraph(TGraph& graph)
{
  for (UInt_t i = graph.GetN() - 1; i > 0; --i) {
    // cout << "Points " << i-1 << ":" << graph.GetX()[i-1] << " " 
    //      << i << ":" << graph.GetX()[i] << endl;
    if (graph.GetX()[i] <= graph.GetX()[i-1] ||
        Float_t(graph.GetX()[i]) <= Float_t(graph.GetX()[i-1])) {
      // cout << "Removing point " << i << endl;
      graph.RemovePoint(i);
    } // if x values at i and i-1 are in the wrong order
  } // backward loop over graph points
} // void RooNumInverse::consolidateGraph


Double_t
RooNumInverse::evaluate() const 
{ 
  // TODO: add linear extrapolation
  return spline_.Eval(x_) ; 
} 



