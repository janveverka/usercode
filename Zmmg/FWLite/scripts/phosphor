#!/usr/bin/env python

'''
phosphor

This is the main driver for the PHOSPHOR fitter.
'''

import ConfigParser
import optparse
import os
import sys

from Zmmg.FWLite.phosphor.fitter import Fitter

#===============================================================================
class Driver():

    #___________________________________________________________________________
    def __init__(self):
        '''
        Initializes the Driver class.
        '''
        self.setup_parser()
        (self.options, self.args) = self.parser.parse_args()
        self.check_options_and_args()
    ## End of Driver.__init__().

    #___________________________________________________________________________
    def setup_parser(self):
        '''Initialize the command-line option parser.'''
        self.parser = optparse.OptionParser(
            usage='usage: %prog [options] cfg-file-1 [ ... cfg-file-N]',
            description="PHOSPHOR fit driver.",
            version='%prog pre-alpha-version'
            )

        self.parser.add_option(
            '-o', '--output-file', action='store', type='string',
            dest='outputfile', default='phosphor_test.root',
            help="write output to <file>", metavar="<file>"
            )
    ## End of Driver.setup_parser().

    #___________________________________________________________________________
    def check_options_and_args(self):
        '''Make sure that the command-line options and arguments are sane.'''        
        ## Has a config filename been provided?
        if not self.args:
            self.parser.print_help()
            sys.exit('You must provide a cfg-file.')
    ## End of Driver.check_options_and_args().
    
    #___________________________________________________________________________
    def run(self):
        '''Entry point to the execution of the PHOSPHOR fit.'''
        self.parse_configuration(self.args)
        self.setup_fitter()
        self.setup_model()
        self.do_fit()
    ## End of Driver.run().
    
    #___________________________________________________________________________
    def parse_configuration(self, cfg_files):
        '''Parse the configuration file.'''
        defaults = {'title': ''}
        self.config = ConfigParser.SafeConfigParser(defaults)
        self.config.read(cfg_files)
    ## End of Driver.parse_configuration().
    
    #___________________________________________________________________________
    def setup_fitter(self):
        '''
        Create an instance of the fitter.
        Preconditions: self.configuration exists.
        Postconditions: self.fitter exists and correspons to the current
            configuration.
        '''
        self.fitter = Fitter(name=self.config.get('FITTER', 'name'),
                             title=self.config.get('FITTER', 'title'))
    ## End of Driver.setup_fitter().
    
    #___________________________________________________________________________
    def setup_model(self):
        '''
        Setup the fit model.
        Preconditions: fitter and config are present.
        Postconditions: fitter has a model attribute corresponding to the
            current config.
        '''
        model_cfg = dict(self.config.items('MODEL'))
        self.fitter.build_model(model_cfg)
    ## End of Driver.setup_model().
    
    #___________________________________________________________________________
    def do_fit(self):
        '''Carry out all the fits given in the configuration.'''
        pass
    ## End of Driver.do_fit().

## End of class Driver().


#===============================================================================
def main():
    driver = Driver()
    driver.run()
    return driver
## End of main().


#===============================================================================
if __name__ == '__main__':
    d = main()
    import user
